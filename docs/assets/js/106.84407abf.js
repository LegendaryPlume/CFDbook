(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{435:function(t,n,s){"use strict";s.r(n);var a=s(12),e=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"_1-命令简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-命令简介"}},[t._v("#")]),t._v(" 1.命令简介")]),t._v(" "),n("p",[t._v("indent 通过插入或删除空格来改变 C 代码文件的外观。")]),t._v(" "),n("p",[t._v("indent 可以格式化 C 代码文件，以方便程序员阅读、修改等操作。")]),t._v(" "),n("h2",{attrs:{id:"_2-命令格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-命令格式"}},[t._v("#")]),t._v(" 2.命令格式")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("indent "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("input-files"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nindent "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("single-input-file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-o output-file"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nindent "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--version")]),t._v("\n")])])]),n("h2",{attrs:{id:"_3-选项说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-选项说明"}},[t._v("#")]),t._v(" 3.选项说明")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("-bad, --blank-lines-after-declarations\n\t在声明后加上空白行。\n-bap, --blank-lines-after-procedures\n\t强制在过程体后加空行。\n-bbb, --blank-lines-before-block-comments\n\t强制在注释块之前插入空行。\n-bbo, --break-before-boolean-operator\n\t更喜欢在布尔运算符之前将长行分开。\n-bc, --blank-lines-after-commas\n\t在声明段中，如果出现逗号就换行。\n-bl, --braces-after-if-line\n\t在 if（或 else、for 等）后面加大括号。\n-blf, --braces-after-func-def-line\n\t在函数定义行后面加大括号。\n-bli, --brace-indent N\n\t缩进大括号 N 个空格。\n-bls, --braces-after-struct-decl-line\n\t在结构声明行后面加大括号。\n-br, --braces-on-if-line\n\t在 if（或 else、for 等）后面加上大括号。\n-brf, --braces-on-func-def-line\n\t在函数定义行上加大括号。\n-brs, --braces-on-struct-decl-line\n\t在 struct 声明行上加大括号。\n-bs, --Bill-Shannon, --blank-before-sizeof\n\t在 sizeof 和它的参数之间加一个空格。\n-c, --comment-indentation N\n\t将注释置于程序右侧指定的栏位。\n-cbi, --case-brace-indentation N\n\t在 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" 标签后缩进大括号 N 个空格。\n-cd, --declaration-comment-column N\n\t将注释置于声明右侧指定的栏位。\n-cdb, --comment-delimiters-on-blank-lines\n\t注释符号自成一行。\n-cdw, --cuddle-do-while\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" 语句中将 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" 仅靠前面的 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("。\n-ce, --cuddle-else\n\t将 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" 仅靠前面的 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("。\n-ci, --continuation-indentation N\n\t叙述过长而换行时，指定换行后缩排的空格数。\n-cli, --case-indentation N\n\t使用 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" 时，switch 缩排的空格数。\n-cp, --else-endif-column N\n\t将注释置于 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" 与 elseif 叙述右侧指定的栏位。\n-cs, --space-after-cast\n\t在转换运算符之后空一格。\n-d, --line-comments-indentation N\n\t针对不是放在代码右侧的注释，设置其缩排空格数。\n-bfda, --break-function-decl-args\n\t在声明中所有参数之前换行。\n-bfde, --break-function-decl-args-end\n\t在声明的最后一个参数之后换行。\n-dj, --left-justify-declarations N\n\t如果使用 "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-cd")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" 则声明后的注释在声明后面对齐。\n-di, --declaration-indentation N\n\t将声明区段的变量置于指定的栏位。\n-fc1, --format-first-column-comments\n\t针对放在每行最前端的注释，设置其格式。\n-fca, --format-all-comments\n\t设置所有注释的格式。\n-gnu, --gnu-style\n\t使用指定的 GNU 格式，该参数为默认值。\n-hnl, --honour-newlines\n\t更喜欢在输入中换行的位置打断长行。\n-i, --indent-level N\n\t将缩进级别设置为 N 个空格。\n-il, --indent-label N\n\t将标签的偏移量设置为第 N 列\n-ip, --parameter-indentation N \n\t旧式函数定义中的参数类型缩进 N 个空格。\n-kr, --k-and-r-style\n\t指定使用 Kernighan "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Ritchie 的格式。\n-l, --line-length N\n\t将非注释行的最大长度设置为 N。\n-lc, --comment-line-length N\n\t设置注释格式的最大行长为 N。\n-linux, --linux-style\n\t使用 Linux 编码风格。\n-lp, --continue-at-parentheses\n\t叙述过长而换行，且叙述中包含了括号时，将括号中的每行起始栏位内容垂直对齐排列。\n-lps, --leave-preprocessor-space\n\t在“"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#”和预处理器指令之间留出空格。")]),t._v("\n-nlps, --remove-preprocessor-space\n\t删除“"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#”和预处理器指令之间的空格。")]),t._v("\n-nbad, --no-blank-lines-after-declarations\n\t在声明区段后不要加上空白行。\n-nbap, --no-blank-lines-after-procedures\n\t不要在过程体之后强制空行。\n-nbbo, --break-after-boolean-operator\n\t不喜欢在布尔运算符之前打断长行。\n-nbbb, --no-blank-lines-before-block-comments\n\t在块注释前不要有空行。\n-nbc, --no-blank-lines-after-commas\n\t不要在声明中的逗号后强制换行。\n-nbfda, --dont-break-function-decl-args\n\t不要将每个参数放在单独一行的函数声明中。\n-ncdb, --no-comment-delimiters-on-blank-lines\n\t注释符号不自成一行。\n-ncdw, --dont-cuddle-do-while\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" 中不讲 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" 与 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" 仅靠在一起。\n-nce, --dont-cuddle-else\n\t不将 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" 置于 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" 后面。\n-ncs, --no-space-after-casts\n\t不要在转换运算符后放置空格。\n-ndjn, --dont-left-justify-declarations\n\t声明后的注释与其他语句后的注释被视为相同。\n-nfc1, --dont-format-first-column-comments\n\t不要像往常一样格式化第一列中的注释\n-nfca, --dont-format-comments\n\t不用格式化任何注释。\n-nhnl, --ignore-newlines\n\t不喜欢在输入中换行的位置打断长行。\n-nip, --no-parameter-indentation\n\t参数不要缩进。\n-nlp, --dont-line-up-parentheses\n\t叙述过长而换行，且叙述中包含了括号时，不用将括号中的每行起始栏位垂直对其排列。\n-npcs, --no-space-after-function-call-names\n\t在调用函数名之后，不要添加空格。\n-nprs, --no-space-after-parentheses\n\t不要在“"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("”之后和“"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("”之前放置一个空格。\n-npro, --ignore-profile\n\t不要读取 indent 的配置文件“.indent.pro”。\n-npsl, --dont-break-procedure-type\n\t程序类型与程序名称放在同一行。\n-nsaf, --no-space-after-for\n\t不要在 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" 后加空格。\n-nsai, --no-space-after-if\n\t不要 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 后加空格。\n-nsaw, --no-space-after-while\n\t不要在 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" 后加空格\n-nsc, --dont-star-comments\n\t注释左侧不要添加星号。\n-nsob, --leave-optional-blank-lines\n\t不用处理多余的空白行。\n-nss, --dont-space-special-semicolon\n\t若 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" 或 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" 区段仅有一行时，在分号前不加空格。\n-nut, --no-tabs\n\t使用空格 space 而不是制表符 tab。\n-nv, --no-verbosity\n\t不显示详细的信息。\n-orig, "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--original")]),t._v("\n\t使用原始的 Berkeley 编码风格。\n-pcs, --space-after-procedure-calls\n\t在调用函数名与“"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("”之间添加空格。\n-pi, --paren-indentation N\n\t当语句被打破时，指定每个开括号"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'('")]),t._v("的额外缩进。\n-pmt, --preserve-mtime\n\t保留对输出文件的访问和修改时间。\n-ppi, --preprocessor-indentatio N\n\t指定预处理器条件语句的缩进。\n-prs, --space-after-parentheses\n\t在每个“"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("”后面和“"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("”前面都加一个空格。\n-psl, --procnames-start-lines\n\t将过程的类型放在它的名称之前。\n-saf, --space-after-for\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" 之后加一个空格。\n-sai, --space-after-if\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" 之后加一个空格。\n-saw, --space-after-while\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" 之后加一个空格。\n-sbi, --struct-brace-indentation N\n\t结构、联合或枚举的大括号缩进 N 个空格。\n-sc, --start-left-side-of-comments\n\t在每行注释左侧添加星号。\n-sob, --swallow-optional-blank-lines\n\t删除多余的空行。\n-ss, --space-special-semicolon\n\t若 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" 或 wile 区段仅有一行时，在分号前加上空格。\n-st, --standard-output\n\t将结果显示在标准输出设备上。\n"),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-T")]),t._v("\n\t数据类型名称缩进。\n-ts, --tab-size N\n\t设置 Tab 的长度为 N 个空格。\n-ut, --use-tabs\n\t使用 tabs，这是缺省行为。\n-v, "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--verbose")]),t._v("\n\t显示详细的执行过程。\n"),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--version")]),t._v("\n\t显示版本信息。\n")])])]),n("h2",{attrs:{id:"_4-常用示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-常用示例"}},[t._v("#")]),t._v(" 4.常用示例")]),t._v(" "),n("p",[t._v("假设我们有如下未格式化的 C 代码 main.c。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints Hello.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("puts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints World.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("puts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("（1）采用预设的 GNU 风格进行格式化。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("indent "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-gnu")]),t._v(" main.c "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" main.gnu.c\n")])])]),n("p",[t._v("格式化后的结果为")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints Hello.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("puts")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints World.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("puts")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("（2）采用预设的 Kernighan & Ritchie 风格格式化。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("indent "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-kr")]),t._v(" main.c "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" main.kr.c\n")])])]),n("p",[t._v("格式化后的结果为")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints Hello.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" \n "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("puts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints World.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("puts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),n("p",[t._v("（3）采用预设的 Berkeley 风格格式化。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("indent "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-orig")]),t._v(" main.c "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" main.orig.c\n")])])]),n("p",[t._v("格式化后的结果为")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints Hello.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("            \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("puts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prints World.")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v("           "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("puts")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"World"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("（4）所有的 sizeof 后面添加一个空格且删除多余的空行。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("indent "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-bs")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-sob")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input-file"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("output-file"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),n("p",[t._v("（5）查看版本。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("indent "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--version")]),t._v("\nGNU indent "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.2")]),t._v(".11\n")])])]),n("hr"),t._v(" "),n("h2",{attrs:{id:"参考文献"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/indent.1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("indent(1) - Linux manual page - man7.org"),n("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=e.exports}}]);