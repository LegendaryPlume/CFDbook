(window.webpackJsonp=window.webpackJsonp||[]).push([[269],{598:function(a,t,s){"use strict";s.r(t);var e=s(12),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"_1-命令简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-命令简介"}},[a._v("#")]),a._v(" 1.命令简介")]),a._v(" "),t("p",[a._v("strace 用于跟踪系统调用和信号。")]),a._v(" "),t("p",[a._v("strace 是一个集诊断、调试、统计于一体的工具，我们可以使用 strace 跟踪程序的系统调用和信号传递来对程序进行分析，以达到解决问题或者是了解程序工作过程的目的。当然 strace 与专业的调试工具比如说 gdb 之类的是没法相比的，因为它不是一个专业的调试器。")]),a._v(" "),t("p",[a._v("strace 的最简单的用法就是执行一个指定的命令，在指定的命令结束之后它也就退出了。在命令执行的过程中，strace 会记录和解析进程的所有系统调用以及这个进程所接收到的所有信号值。")]),a._v(" "),t("h2",{attrs:{id:"_2-命令格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-命令格式"}},[a._v("#")]),a._v(" 2.命令格式")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("strace")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("options"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pid"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("strace")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("options"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("command"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("args"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("h2",{attrs:{id:"_3-选项说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-选项说明"}},[a._v("#")]),a._v(" 3.选项说明")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-c")]),a._v("\n\t统计每个系统调用的时间、次数和错误，并在程序退出时报告摘要\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-C")]),a._v("\n\t类似于 -c，但在进程运行时也打印常规输出\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-D")]),a._v("\n\t将跟踪进程作为分离的孙进程运行，而不是作为跟踪对象的父进程运行。这通过保持跟踪对象是调用进程的直接子进程来减少 "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("strace")]),a._v(" 的可见效果\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v("\n\t输出 "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("strace")]),a._v(" 关于标准错误的调试信息\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v("\n\t跟踪由 fork"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(", vfork"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" and clone"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" 调用所产生的子进程\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-ff")]),a._v("\n\t如果提供 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" FILENAME，则所有进程的跟踪结果输出到相应的 FILENAME.pid 中，pid 是各进程的进程号 \n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-F")]),a._v("\n\t该选项已废弃，作用等同于 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-h")]),a._v("\n\t输出简要的帮助信息\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v("\n\t在系统调用时打印指令指针\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-q")]),a._v("\n\t禁止附加、分离等信息。当输出被重定向到文件并直接运行命令而不是附加命令时，这将自动发生\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-qq")]),a._v("\n\t如果给定两次，则禁止关于进程退出状态的消息。\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-r")]),a._v("\n\t在每次系统调用进入时打印相对时间戳。它记录连续系统调用开始之间的时间差\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v("\n\t在输出中的每一行前加上时间信息\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-tt")]),a._v("\n\t如果给定两次，在输出中的每一行前加上微秒级的时间信息\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-ttt")]),a._v("\n\t如果给定三次，则打印的时间将包括微秒，并且开始部分将打印自纪元以来的秒数\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-T")]),a._v("\n\t显示每一系统调用所耗的时间 \n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v("\n\t输出所有的系统调用。一些调用关于环境变量，状态，输入输出等调用，由于使用频繁默认不输出\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-V")]),a._v("\n\t输出 "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("strace")]),a._v(" 的版本信息.\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-x")]),a._v("\n\t以十六进制形式输出非标准字符串\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-xx")]),a._v("\n\t所有字符串以十六进制形式输出\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-y")]),a._v("\n\t与文件描述符参数关联的打印路径\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-a")]),a._v(" COLUMN\n\t设置返回值的输出位置，默认为40\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-b")]),a._v(" SYSCALL\n\t如果达到指定的系统调用，与跟踪进程分离。目前，只支持 execve。如果希望跟踪多线程进程，因此需要 -f，但不希望跟踪其（可能非常复杂的）子进程，则此选项非常有用\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" EXPR\n\t指定一个表达式，用来控制如何跟踪。格式如下: \n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("qualifier"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("value1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(",value2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". \n\tqualifier 只能是 trace, abbrev, verbose, raw, signal, read, "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("write")]),a._v(" 其中之一。value 是用来限定的符号或数字。默认的 qualifier 是 trace，感叹号是否定符号。例如：-e "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("open")]),a._v(" 等价于 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("trace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("open，表示只跟踪 "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("open")]),a._v(" 调用。而 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-etrace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("open 表示跟踪除了 ope 以外的所有其他调用。有两个特殊的符号 all 和 none，分别表示跟踪所有和不跟踪任何系统调用。注意有些 Shell 使用 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v(" 来执行历史记录里的命令，所以要使用反斜杠对 "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v(" 进行转义\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("trace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("SET\n\t只跟踪指定的系统调用。例如: "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("trace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("open,close,rean,write 表示只跟踪这四个系统调用，默认的为 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("trace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("all \n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("trace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("file\n\t只跟踪有关文件操作的系统调用\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("trace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("process \n\t只跟踪有关进程控制的系统调用\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("trace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("network \n\t跟踪与网络有关的所有系统调用\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("strace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("signal\n\t跟踪所有与系统信号有关的系统调用 \n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("trace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("ipc \n\t跟踪所有与进程通讯有关的系统调用\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("trace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("desc\n\t跟踪所有与文件描述符相关的系统调用\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("trace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("memory\n\t跟踪所有与内存映射相关的系统调用\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("abbrev")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("SET\n\t缩写打印大型结构的每个成员的输出。默认值是 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("abbrev")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("all。-v 选项的效果是 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("abbrev")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("none\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("verbose")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("SET\n\t为指定的系统调用集取消引用结构。默认是 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("verbose")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("all\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("raw")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("SET\n\t将指定的系统调用的参数以十六进制显示\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("signal")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("SET\n\t指定跟踪的系统信号，默认为 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("signal")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("all。如 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("signal")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("SIGIO（或 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("signal")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!")]),a._v("io），表示不跟踪 SIGIO 信号\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("read")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("SET\n\t输出从指定文件描述符中读出的数据。例如：-e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("read")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3,5")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("write")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("SET\n\t输出写入到指定文件中的数据\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" FILENAME\n\t将 "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("strace")]),a._v(" 的输出写入指定文件\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-O")]),a._v(" OVERHEAD\n\t将跟踪系统调用的开销设置为指定的微秒\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" PID\n\t跟踪指定的进程\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-P")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")]),a._v("\n\t只跟踪系统调用的访问路径。多个 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-P")]),a._v(" 选项可用于指定多个路径\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-s")]),a._v(" STRSIZE\n\t指定输出的字符串的最大长度，默认为 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("32")]),a._v("。注意，文件名不被认为是字符串，总是全部打印\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-S")]),a._v(" SORTBY\n\t根据指定的条件对 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-c")]),a._v(" 选项打印的直方图的输出进行排序。SORTBY 合法值是 time、calls、name 和 nothing，默认值是 "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("time")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-u")]),a._v(" USERNAME\n\t以指定用户的 "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("UID")]),a._v("、GID 和补充组执行被跟踪的命令\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-E")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("VAR")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("VAL\n \t为命令设置环境变量\n "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-E")]),a._v(" VAR\n \t从继承的环境变量列表中删除变量 VAR，然后将其传递给命令\n")])])]),t("h2",{attrs:{id:"_4-常用示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-常用示例"}},[a._v("#")]),a._v(" 4.常用示例")]),a._v(" "),t("p",[a._v("现在我们做一个很简单的程序来演示 strace 的基本用法。这个程序的 C 语言代码如下：")]),a._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[a._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("<stdio.h>")])]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"please input:\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("scanf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"%d"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),a._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("printf")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"%10d\\n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("通过 gcc 编译，默认生成名为 a.out 的可执行程序。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("gcc main.c\n")])])]),t("p",[a._v("（1）追踪系统调用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("strace -o strace.out ./a.out\n")])])]),t("p",[a._v("输入 4 然后回车生成 strace 的输出文件 strace.out，其内容如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('execve("./a.out", ["./a.out"], [/* 28 vars */]) = 0\nbrk(0)                                  = 0x1e79000\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7ff4e9feb000\naccess("/etc/ld.so.preload", R_OK)      = 0\nopen("/etc/ld.so.preload", O_RDONLY|O_CLOEXEC) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=18, ...}) = 0\nmmap(NULL, 18, PROT_READ|PROT_WRITE, MAP_PRIVATE, 3, 0) = 0x7ff4e9fea000\nclose(3)                                = 0\nreadlink("/proc/self/exe", "/root/test/c++/strace/a.out", 4096) = 27\nopen("/lib64/libonion.so", O_RDONLY|O_CLOEXEC) = 3\nread(3, "\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0`\\20\\0\\0\\0\\0\\0\\0"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0755, st_size=42880, ...}) = 0\nmmap(NULL, 1072448, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7ff4e9ee4000\nmprotect(0x7ff4e9ee7000, 1048576, PROT_NONE) = 0\nmmap(0x7ff4e9fe7000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x3000) = 0x7ff4e9fe7000\nmmap(0x7ff4e9fe8000, 7488, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7ff4e9fe8000\nclose(3)                                = 0\nmunmap(0x7ff4e9fea000, 18)              = 0\nopen("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=74350, ...}) = 0\nmmap(NULL, 74350, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7ff4e9ed1000\nclose(3)                                = 0\nopen("/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3\nread(3, "\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\20\\35\\2\\0\\0\\0\\0\\0"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0755, st_size=2122016, ...}) = 0\nmmap(NULL, 3944896, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7ff4e9a07000\nmprotect(0x7ff4e9bc1000, 2093056, PROT_NONE) = 0\nmmap(0x7ff4e9dc0000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1b9000) = 0x7ff4e9dc0000\nmmap(0x7ff4e9dc6000, 16832, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7ff4e9dc6000\nclose(3)                                = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7ff4e9fea000\nopen("/lib64/libdl.so.2", O_RDONLY|O_CLOEXEC) = 3\nread(3, "\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0`\\16\\0\\0\\0\\0\\0\\0"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0755, st_size=19344, ...}) = 0\nmmap(NULL, 2109744, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7ff4e9803000\nmprotect(0x7ff4e9805000, 2097152, PROT_NONE) = 0\nmmap(0x7ff4e9a05000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7ff4e9a05000\nclose(3)                                = 0\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7ff4e9ecf000\narch_prctl(ARCH_SET_FS, 0x7ff4e9ecf740) = 0\nmprotect(0x7ff4e9dc0000, 16384, PROT_READ) = 0\nmprotect(0x7ff4e9a05000, 4096, PROT_READ) = 0\nmprotect(0x600000, 4096, PROT_READ)     = 0\nmprotect(0x7ff4e9fec000, 4096, PROT_READ) = 0\nmunmap(0x7ff4e9ed1000, 74350)           = 0\nfstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 1), ...}) = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7ff4e9ee3000\nwrite(1, "please input:\\n", 14)         = 14\nfstat(0, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 1), ...}) = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7ff4e9ee2000\nread(0, "4\\n", 1024)                    = 2\nwrite(1, "         4\\n", 11)            = 11\nexit_group(0)                           = ?\n+++ exited with 0 +++\n')])])]),t("p",[a._v("从跟踪的结果可以看到，系统首先调用 execve 开始一个新的进程，接着进行环境的初始化操作，最后停顿在"),t("code",[a._v('read(0, "4\\n", 1024) = 2')]),a._v("，这也就是执行到了 scanf 函数，等待我们输入数字。在输入完 4 之后，再调用 write 函数将格式化后的数值 4 输出到屏幕，最后调用 exit_group 退出进程，完成整个程序的执行过程。")]),a._v(" "),t("p",[a._v("（2）跟踪信号传递。")]),a._v(" "),t("p",[a._v("我们还是使用上面的 a.out 程序，来观察进程接收信号的情况，即跟踪进程和信号相关的系统调用。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#开启跟踪")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("strace")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("trace")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("signal "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-o")]),a._v(" strace.out ./a.out\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#查找进程 ./a.out 进程 ID")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-ef")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" a.out "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"grep\\|strace"')]),a._v("\nroot     "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10787")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10784")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("22")]),a._v(":46 pts/1    00:00:00 ./a.out\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#根据上一步查到的进程 ID 通过 kill 命令发送信号 SIGKILL")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-9")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10787")]),a._v("\n")])])]),t("p",[a._v("再次查看 strace 的输出文件 strace.out 的内容。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("--- SIGWINCH {si_signo=SIGWINCH, si_code=SI_KERNEL} ---\n--- SIGWINCH {si_signo=SIGWINCH, si_code=SI_KERNEL} ---\n+++ killed by SIGKILL +++\n")])])]),t("p",[a._v("进程被杀退出时，strace 会输出 killed by SIGX（SIGX 代表发送给进程的信号）等，那么进程自己退出时会输出什么呢？")]),a._v(" "),t("p",[a._v("这里有个叫做 test_exit 的程序，其代码如下：")]),a._v(" "),t("div",{staticClass:"language-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[a._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("<stdio.h>")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[a._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[a._v("include")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("<stdlib.h>")])]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" argc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v("argv"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n       "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("exit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("我们 strace 看下它退出时 strace 上能看到什么痕迹。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("strace -tt -e trace=process -f ./test_exit\n")])])]),t("p",[a._v("-e trace=process 表示只跟踪和进程管理相关的系统调用。")]),a._v(" "),t("p",[a._v("输出：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('23:07:24.672849 execve("./test_exit", ["./test_exit"], [/* 35 vars */]) = 0\n23:07:24.674665 arch_prctl(ARCH_SET_FS, 0x7f1c0eca7740) = 0\n23:07:24.675108 exit_group(1)           = ?\n23:07:24.675259 +++ exited with 1 +++\n')])])]),t("p",[a._v("可以看出，进程自己退出时（调用 exit 函数，或者从 main 函数返回）, 最终调用的是 exit_group系统调用， 并且 strace 会输出 exited with X（X为退出码）。")]),a._v(" "),t("p",[a._v("可能有人会疑惑，代码里面明明调用的是 exit, 怎么显示为 exit_group?")]),a._v(" "),t("p",[a._v("这是因为这里的 exit 函数不是系统调用，而是 glibc 库提供的一个函数，exit 函数的调用最终会转化为 exit_group 系统调用，它会退出当前进程的所有线程。实际上，有一个叫做 "),t("code",[a._v("_exit()")]),a._v(" 的系统调用（注意 exit 前面的下划线）线程退出时最终会调用它。")]),a._v(" "),t("p",[a._v("（3）系统调用统计。")]),a._v(" "),t("p",[a._v("strace 不光能追踪系统调用，通过使用参数 -c，它还能将进程所有的系统调用做一个统计分析给你，下面来看看 strace 对系统调用的统计。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("strace")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-c")]),a._v(" ./a.out\nplease input:\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n% "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("time")]),a._v("     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000038")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("        "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),a._v("           mmap\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("read")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("write")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("open")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("           close\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("           fstat\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("           mprotect\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("           munmap\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("           brk\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("           access\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("           execve\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("           readlink\n  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000000")]),a._v("           "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("         "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("           arch_prctl\n------ ----------- ----------- --------- --------- ----------------\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100.00")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000038")]),a._v("                    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("52")]),a._v("           total\n")])])]),t("p",[a._v("这里很清楚的告诉你调用了那些系统函数，调用次数多少，消耗了多少时间等等这些信息，这个对我们分析一个程序来说是非常有用的。")]),a._v(" "),t("p",[a._v("（4）跟踪一个现有的进程。")]),a._v(" "),t("p",[a._v("strace 不光能自己初始化一个进程进行 trace，还能使用 -p 选项追踪现有进程。具体用法如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("strace -p PID\n")])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"参考文献"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[a._v("#")]),a._v(" 参考文献")]),a._v(" "),t("p",[t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/strace.1.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("strace(1) - Linux manual page - man7.org"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://man.linuxde.net/strace",target:"_blank",rel:"noopener noreferrer"}},[a._v("strace - Linux 命令大全"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/machangwei-8/p/10388883.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("strace命令详解 - 马昌伟"),t("OutboundLink")],1)]),a._v(" "),t("Vssue",{attrs:{title:"strace"}})],1)}),[],!1,null,null,null);t.default=r.exports}}]);