(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{360:function(t,s,a){"use strict";a.r(s);var n=a(12),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-命令简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-命令简介"}},[t._v("#")]),t._v(" 1.命令简介")]),t._v(" "),s("p",[t._v("c++filt 命令可用于解析 C++ 和 Java 中被修饰的符号，比如变量与函数名称。")]),t._v(" "),s("p",[t._v("我们知道， 在 C++ 和 Java 中， 允许函数重载，也就是说我们可以写出多个同名但参数类型不同的函数，其实现依赖于编译器的名字改编（Name Mangling）机制，即编译器会将函数的名称进行修饰，加入参数信息。")]),t._v(" "),s("p",[t._v("考察如下程序：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//@file:print.cpp")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dTest"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" strElfFileName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"readelf "')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("strElfFileName"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("使用 g++ 编译上面的 print.cpp 生成目标文件 print.o。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("g++ -c print.cpp -o print.o\n")])])]),s("p",[t._v("然后使用命令 strings 查找 print.o 中的可打印字符串。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("strings print.o\nreadelf \nGCC: (GNU) 4.8.5 20150623 (Red Hat 4.8.5-4)\n.symtab\n.strtab\n.shstrtab\n.rela.text\n.data\n.bss\n.rodata\n.rela.init_array\n.comment\n.note.GNU-stack\n.rela.eh_frame\nprint.cpp\n_ZStL8__ioinit\n_Z41__static_initialization_and_destruction_0ii\n_ZL5dTest\n_GLOBAL__sub_I__Z5printRKSs\n_Z5printRKSs\n_ZSt4cout\n_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc\n_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E\n_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_\n_ZNSolsEPFRSoS_E\n_ZNSt8ios_base4InitC1Ev\n__dso_handle\n_ZNSt8ios_base4InitD1Ev\n__cxa_atexit\n")])])]),s("p",[t._v("找到其中两个字符串，分别是"),s("code",[t._v("_ZL5dTest")]),t._v(" 和 "),s("code",[t._v("_Z5printRKSs")]),t._v(" ，根据其包含的内容，我们大致能够猜测，两个字符串分别对应源码中的常量 dTest 和函数 print()。使用 c++filt 进行符号解析（symbol demangling）来验证我们的猜想。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("c++filt _ZL5dTest\ndTest\n\nc++filt _Z5printRKSs\nprint(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n")])])]),s("p",[t._v("猜测正确，源码文件中的变量名和函数名被修饰后，通过 c++filt 命令可以还原回来，这正是 c++filt 命令的功能。")]),t._v(" "),s("h2",{attrs:{id:"_2-命令格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-命令格式"}},[t._v("#")]),t._v(" 2.命令格式")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("c++filt "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-_"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--strip-underscore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--no-strip-underscore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--no-params"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--types"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--no-verbose"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-s "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("--format"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--help"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("--version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("注意，如果没有给出符号参数 [symbol...]，c++filt 将从标准输入中读取符号名称。")]),t._v(" "),s("h2",{attrs:{id:"_3-选项说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-选项说明"}},[t._v("#")]),t._v(" 3.选项说明")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("-_, --strip-underscore\n\t在某些系统中，C和C++编译器都在每个名字前面加下划线。例如，C 名称 foo 获得低级名称为 _foo。此选项用于删除初始下划线，c++filt 是否默认删除下划线是依赖于目标的\n-n, --no-strip-underscore\n\t不删除初始下划线\n-p, --no-params\n\t当解析函数名时，不显示函数参数的类型\n-t, "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--types")]),t._v("\n\t试图解析类型与函数名\n-i, --no-verbose\n\t输出结果中不包括任何实现细节\n-s, "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--format")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("FORMAT\n\tc++filt 可以解析不同编译器修饰的符号，此选项用于指明符号修饰所采用的方法：\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"auto"')]),t._v("：根据可执行文件自动选择符号解析方法，此为默认选项\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gnu"')]),t._v("： GNU C++ compiler （g++）的符号修饰方法\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lucid"')]),t._v("： Lucid compiler （lcc）的符号修饰方法\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arm"')]),t._v("：C++ Annotated Reference Manual 指明的方法\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hp"')]),t._v("：HP compiler （aCC）的符号修饰方法\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"edg"')]),t._v("：EDG compiler 的符号修饰方法\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gnu-v3"')]),t._v("：GNU C++ compiler "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g++"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" with the V3 ABI 的符号修饰方法\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"java"')]),t._v("：GNU Java compiler （gcj）的符号修饰方法\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gnat"')]),t._v("：GNU Ada compiler "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GNAT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 的符号修饰方法\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--help")]),t._v("\n\t显示帮助信息\n"),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--version")]),t._v("\n\t显示版本信息\n@FILE\n\t从文件 FILE 中读取命令行选项，读取的选项将插入到 @FILE 选项的位置。如果文件不存在，或者无法读取，那么选项 @FILE 将被按照字面意义处理，而不是被忽略\n")])])]),s("h2",{attrs:{id:"_4-常用示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-常用示例"}},[t._v("#")]),t._v(" 4.常用示例")]),t._v(" "),s("p",[t._v("（1）解析编译器 g++ 修饰的函数名称。还是以第一节“1.命令简介”中函数 print() 的名字为例。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("c++filt -s gnu-v3 _Z5printRKSs\nprint(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n")])])]),s("p",[t._v("（2）解析编译器 g++ 修饰的函数名称，但不显示函数参数类型。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("c++filt -p _Z5printRKSs\nprint\n")])])]),s("p",[t._v("（3）解析编译器 g++ 修饰的变量名称。还是以第一节“1.命令简介”中变量 dTest 的名字为例。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("c++filt _ZL5dTest\ndTest\n")])])]),s("hr"),t._v(" "),s("h2",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/c++filt.1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("c++filt(1) - Linux manual page - man7.org"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/BloodAndBone/p/7912179.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("mangle和demangle"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);