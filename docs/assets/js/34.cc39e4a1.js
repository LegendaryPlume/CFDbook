(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{366:function(n,t,a){"use strict";a.r(t);var e=a(12),s=Object(e.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"_1-命令简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-命令简介"}},[n._v("#")]),n._v(" 1.命令简介")]),n._v(" "),t("p",[n._v("readelf 用于读取 ELF（Executable and Linkable Format）格式文件的详细信息，包括目标文件、可执行文件、共享目标文件与核心转储文件。")]),n._v(" "),t("h3",{attrs:{id:"_1-1-elf-文件分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-elf-文件分类"}},[n._v("#")]),n._v(" 1.1 ELF 文件分类")]),n._v(" "),t("p",[n._v("（1）可重定位文件（Relocatable File），这类文件包含了代码和数据，用于链接生成可以执行文件或共享目标文件，目标文件和静态链接库均属于可重定位文件，例如"),t("code",[n._v("*.o")]),n._v("或"),t("code",[n._v("lib*.a")]),n._v("文件；")]),n._v(" "),t("p",[n._v("（2）可执行文件（Executable File），用于生成进程映像，载入内存执行。Linux 环境下的 ELF 可执行文件一般没有扩展名，例如用户命令 ls；")]),n._v(" "),t("p",[n._v("（3）共享目标文件（Shared Object File），这种文件包含了代码和数据，用于和可重定位文件或其他共享目标文件一起生成可执行文件。例如 Linux 的动态共享对象（Dynamic Shared Object），C 语言运行时库 glibc-2.5.so；")]),n._v(" "),t("p",[n._v("（4）核心转储文件（Core Dump File），当进程意外终止时，系统可以将该进程的地址空间的内容及终止时的一些其他信息转储到核心转储文件。例如 Linux 下的 core dump。")]),n._v(" "),t("h3",{attrs:{id:"_1-2-elf-文件组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-elf-文件组成"}},[n._v("#")]),n._v(" 1.2 ELF 文件组成")]),n._v(" "),t("p",[n._v("ELF 文件头描述了 ELF 文件的总体信息，包括系统相关、类型相关、加载相关和链接相关的信息。\n（1）系统相关，比如ELF 文件标识的魔数，以及硬件和平台等相关信息，增加了 ELF 文件的移植性，使交叉编译成为可能；\n（2）类型相关，比如 ELF 文件类型，分别有目标文件、可执行文件、动态链接库与核心转储文件；\n（3）加载相关，比如程序头，描述了 ELF 文件被加载时的段信息；\n（4）链接相关，比如节头，描述了 ELF 文件的节信息。")]),n._v(" "),t("h2",{attrs:{id:"_2-命令格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-命令格式"}},[n._v("#")]),n._v(" 2.命令格式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("readelf <option> <elffile...>\n")])])]),t("h2",{attrs:{id:"_3-选项说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-选项说明"}},[n._v("#")]),n._v(" 3.选项说明")]),n._v(" "),t("p",[n._v("运行 readelf 的时候，除了 -v 和 -H 之外，其它的选项必须有一个被指定。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("-a,--all：显示全部信息，等价于 -h -l -S -s -r -d -V -A -I\n-h,--file-header：显示文件头信息\n-l,--program-headers,--segments：显示程序头（如果有的话）\n-S,--section-headers,--sections：显示节头信息（如果有的话）\n-g,--section-groups：显示节组信息（如果有的话）\n-t,--section-details：显示节的详细信息（-S的）\n-s,--syms,--symbols：显示符号表节中的项（如果有的话）\n--dyn-syms：显示动态符号表节中的项（如果有的话）\n-e,--headers：显示全部头信息，等价于-h -l -S\n-n,--notes：显示note段（内核注释）的信息\n-r,--relocs：显示可重定位段的信息。 \n-u,--unwind：显示unwind段信息。当前只支持IA64 ELF的unwind段信息。 \n-d,--dynamic：显示动态段的信息\n-V,--version-info：显示版本段的信息\n-A ,--arch-specific：显示CPU构架信息\n-D,--use-dynamic：使用动态符号表显示符号，而不是符号表\n-x <number or name>,--hex-dump=<number or name>：以16进制方式显示指定节内容。number指定节表中节的索引，或字符串指定文件中的节名\n-R <number or name>,--relocated-dump=<number or name>：以16进制方式显示指定节内容。number指定节表中节的索引，或字符串指定文件中的节名。节的内容被展示前将被重定位。\n-p <number or name>,--string-dump=<number or name>：以可打印的字符串显示指定节内容。number指定节表中节的索引，或字符串指定文件中的节名。\n-c,--archive-index：展示档案头中的文件符号索引信息，执行与 ar 的 t 命令相同的功能，但不使用 BFD 库\n-w[liaprmfFsoR],--debug-dump[=line,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges]：显示调试段中指定的内容\n--dwarf-depth=n：将“.debug_info”节的转储限制为n个子级。这只对--debug dump=info有用。默认为打印所有DIE（debugging information entry）；n的特殊值0也将具有此效果\n--dwarf-start=n：只打印以编号为n的模具开始的DIE，仅适用于使用--debug dump=info选项时。该选项可以与--dwarf-depth=n连用。\n-I,--histogram：显示符号的时候，显示 bucket list 长度的柱状图\n-v,--version：显示 readelf 的版本信息\n-H,--help：显示 readelf 所支持的命令行选项\n-W,--wide：宽行输出\n@file：可以将选项集中到一个文件中，然后使用这个 @file 选项载入\n")])])]),t("h2",{attrs:{id:"_4-常用示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-常用示例"}},[n._v("#")]),n._v(" 4.常用示例")]),n._v(" "),t("h3",{attrs:{id:"_4-1-准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-准备工作"}},[n._v("#")]),n._v(" 4.1 准备工作")]),n._v(" "),t("p",[n._v("（1）首先生成可执行文件形式的 ELF 文件。")]),n._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//@file：main.cpp")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[n._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[n._v("include")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v("<iostream>")])]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("int")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[n._v("::")]),n._v("cout"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<<")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"objdump"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<<")]),n._v("std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[n._v("::")]),n._v("endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),t("p",[n._v("使用 g++，分别不使用和使用 -g 选项，编译生成可执行文件 main.out 和main.debug.out。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("g++ main.cpp -o main.out\ng++ -g main.cpp -o main.debug.out\n\nll\n-rw-r--r-- 1 root root     74 Mar 21 11:48 main.cpp\n-rwxr-xr-x 1 root root   9119 Mar 21 11:49 main.out\n-rwxr-xr-x 1 root root  19695 Mar 21 11:49 main.debug.out\n")])])]),t("p",[n._v("可见，因为加入了调试信息，main.debug.out 的大小明显比 main.out 大很多。")]),n._v(" "),t("p",[n._v("（2）生成库文件。")]),n._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//@file：print.cpp")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[n._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[n._v("include")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v("<iostream>")])]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[n._v("::")]),n._v("cout"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<<")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"readelf"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<<")]),n._v("std"),t("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[n._v("::")]),n._v("endl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),t("p",[n._v("使用 g++ 和 ar，分别生成静态链接库 libprint.a 和动态链接库 libprint.so。")]),n._v(" "),t("div",{staticClass:"language-cpp extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cpp"}},[t("code",[n._v("# 生成静态库libmy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("a\ng"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v("c print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("cpp "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v("o print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("o\nar c libprint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("a print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("o\n\n#生成动态库libprint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("so\ng"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v("shared "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v("fPIC "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v("o libprint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("so print"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("cpp\n")])])]),t("p",[n._v("编译之后，查看生成的文件。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("ll\n-rw-r--r-- 1 root root   2810 Mar 21 13:50 libprint.a\n-rwxr-xr-x 1 root root   8613 Mar 21 13:56 libprint.so\n-rw-r--r-- 1 root root    104 Mar 21 13:40 print.cpp\n-rw-r--r-- 1 root root   2664 Mar 21 13:40 print.o\n")])])]),t("p",[n._v("基于以上可执行文件和库，下面给出一些常用的示例。")]),n._v(" "),t("h3",{attrs:{id:"_4-2-常用示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-常用示例"}},[n._v("#")]),n._v(" 4.2 常用示例")]),n._v(" "),t("p",[n._v("（1）读取可执行文件形式的 ELF 文件头信息。")]),n._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[n._v("readelf "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("-h")]),n._v(" main.out \nELF Header:\n  Magic:   7f "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("45")]),n._v(" 4c "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("46")]),n._v(" 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v("'s complement, little endian\n  Version:                           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n  Type:                              EXEC "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("Executable "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x400780\n  Start of program headers:          "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("64")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes into "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Start of section headers:          "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("4496")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes into "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Flags:                             0x0\n  Size of this header:               "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("64")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Size of program headers:           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("56")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Number of program headers:         "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("9")]),n._v("\n  Size of section headers:           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("64")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Number of section headers:         "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("30")]),n._v("\n  Section header string table index: "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("27")]),n._v("\n")])])]),t("p",[n._v("从"),t("code",[n._v("Type:EXEC (Executable file)")]),n._v('可以看出其类型为 EXEC（可执行文件）。并且可以看出文件的体系结构为 x86-64。另外，含调试信息的"main.debug.out"和不含调试信息的"main"除了一些大小信息之外，其内容是一样的。')]),n._v(" "),t("p",[n._v("（2）读取目标文件形式的 ELF 文件头信息。")]),n._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[n._v("readelf "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("-h")]),n._v(" print.o\nELF Header:\n  Magic:   7f "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("45")]),n._v(" 4c "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("46")]),n._v(" 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v("'s complement, little endian\n  Version:                           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n  Type:                              REL "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("Relocatable "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x0\n  Start of program headers:          "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes into "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Start of section headers:          "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("488")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes into "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Flags:                             0x0\n  Size of this header:               "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("64")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Size of program headers:           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Number of program headers:         "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n  Size of section headers:           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("64")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Number of section headers:         "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("15")]),n._v("\n  Section header string table index: "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("12")]),n._v("\n")])])]),t("p",[n._v("可见目标文件的elf文件，其类型为REL(可重定位文件)。且相对于可执行文件，目标文件没有程序头（段头）信息。")]),n._v(" "),t("p",[n._v("（3）读取静态库文件形式的 ELF 文件头信息。")]),n._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[n._v("readelf "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("-h")]),n._v(" libprint.a \n\nFile: libprint.a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("print.o"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\nELF Header:\n  Magic:   7f "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("45")]),n._v(" 4c "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("46")]),n._v(" 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v("'s complement, little endian\n  Version:                           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n  Type:                              REL "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("Relocatable "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x0\n  Start of program headers:          "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes into "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Start of section headers:          "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("488")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes into "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Flags:                             0x0\n  Size of this header:               "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("64")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Size of program headers:           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Number of program headers:         "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n  Size of section headers:           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("64")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Number of section headers:         "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("15")]),n._v("\n  Section header string table index: "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("12")]),n._v("\n")])])]),t("p",[n._v("可见静态库文件的elf文件，其类型为REL（可重定位文件），且没有程序头（段头）信息。")]),n._v(" "),t("p",[n._v("（4）读取动态库文件形式的 ELF 文件头信息。")]),n._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[n._v("readelf "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("-h")]),n._v(" libprint.so \nELF Header:\n  Magic:   7f "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("45")]),n._v(" 4c "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("46")]),n._v(" 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v("'s complement, little endian\n  Version:                           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("current"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n  Type:                              DYN "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("Shared object "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x870\n  Start of program headers:          "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("64")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes into "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Start of section headers:          "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("4464")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes into "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Flags:                             0x0\n  Size of this header:               "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("64")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Size of program headers:           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("56")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Number of program headers:         "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("7")]),n._v("\n  Size of section headers:           "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("64")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n  Number of section headers:         "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("28")]),n._v("\n  Section header string table index: "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("25")]),n._v("\n")])])]),t("p",[n._v("这里，可见动态库其类型为DYN（共享目标文件），和可执行文件类似，同样拥有程序头（段头）信息。")]),n._v(" "),t("p",[n._v("（5）查看可执行的 ELF 文件程序头信息。")]),n._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[n._v("readelf "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[n._v("-l")]),n._v(" main.out \n\nElf "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("type")]),n._v(" is EXEC "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("Executable "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\nEntry point 0x400780\nThere are "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("9")]),n._v(" program headers, starting at offset "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("64")]),n._v("\n\nProgram Headers:\n  Type           Offset             VirtAddr           PhysAddr\n                 FileSiz            MemSiz              Flags  Align\n  PHDR           0x0000000000000040 0x0000000000400040 0x0000000000400040\n                 0x00000000000001f8 0x00000000000001f8  R E    "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("8")]),n._v("\n  INTERP         0x0000000000000238 0x0000000000400238 0x0000000000400238\n                 0x000000000000001c 0x000000000000001c  R      "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("Requesting program interpreter: /lib64/ld-linux-x86-64.so.2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000\n                 0x0000000000000b04 0x0000000000000b04  R E    "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("200000")]),n._v("\n  LOAD           0x0000000000000dd8 0x0000000000600dd8 0x0000000000600dd8\n                 0x0000000000000284 0x00000000000003a0  RW     "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("200000")]),n._v("\n  DYNAMIC        0x0000000000000df8 0x0000000000600df8 0x0000000000600df8\n                 0x0000000000000200 0x0000000000000200  RW     "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("8")]),n._v("\n  NOTE           0x0000000000000254 0x0000000000400254 0x0000000000400254\n                 0x0000000000000044 0x0000000000000044  R      "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("4")]),n._v("\n  GNU_EH_FRAME   0x000000000000098c 0x000000000040098c 0x000000000040098c\n                 0x0000000000000044 0x0000000000000044  R      "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("4")]),n._v("\n  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000\n                 0x0000000000000000 0x0000000000000000  RW     "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("10")]),n._v("\n  GNU_RELRO      0x0000000000000dd8 0x0000000000600dd8 0x0000000000600dd8\n                 0x0000000000000228 0x0000000000000228  R      "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n\n Section to Segment mapping:\n  Segment Sections"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),n._v(".\n   00     \n   01     .interp \n   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame \n   03     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss \n   04     .dynamic \n   05     .note.ABI-tag .note.gnu.build-id \n   06     .eh_frame_hdr \n   07     \n   08     .init_array .fini_array .jcr .dynamic .got\n")])])]),t("p",[n._v('注意：含调试信息的可执行文件"main.debug.out"和不含调试信息的"main.out"其内容是一样的。')]),n._v(" "),t("p",[n._v("（6）查看动态库 ELF 文件程序头信息。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("readelf -l libprint.so \n\nElf file type is DYN (Shared object file)\nEntry point 0x870\nThere are 7 program headers, starting at offset 64\n\nProgram Headers:\n  Type           Offset             VirtAddr           PhysAddr\n                 FileSiz            MemSiz              Flags  Align\n  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000\n                 0x0000000000000acc 0x0000000000000acc  R E    200000\n  LOAD           0x0000000000000da8 0x0000000000200da8 0x0000000000200da8\n                 0x00000000000002a0 0x00000000000002a8  RW     200000\n  DYNAMIC        0x0000000000000dd0 0x0000000000200dd0 0x0000000000200dd0\n                 0x00000000000001f0 0x00000000000001f0  RW     8\n  NOTE           0x00000000000001c8 0x00000000000001c8 0x00000000000001c8\n                 0x0000000000000024 0x0000000000000024  R      4\n  GNU_EH_FRAME   0x00000000000009f8 0x00000000000009f8 0x00000000000009f8\n                 0x000000000000002c 0x000000000000002c  R      4\n  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000\n                 0x0000000000000000 0x0000000000000000  RW     10\n  GNU_RELRO      0x0000000000000da8 0x0000000000200da8 0x0000000000200da8\n                 0x0000000000000258 0x0000000000000258  R      1\n\n Section to Segment mapping:\n  Segment Sections...\n   00     .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame \n   01     .init_array .fini_array .jcr .data.rel.ro .dynamic .got .got.plt .bss \n   02     .dynamic \n   03     .note.gnu.build-id \n   04     .eh_frame_hdr \n   05     \n   06     .init_array .fini_array .jcr .data.rel.ro .dynamic .got\n")])])]),t("p",[n._v("（7）查看一个可执行的 ELF 文件的节头信息。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("readelf -S main.out\nThere are 30 section headers, starting at offset 0x1190:\n\nSection Headers:\n  [Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .interp           PROGBITS         0000000000400238  00000238\n       000000000000001c  0000000000000000   A       0     0     1\n  [ 2] .note.ABI-tag     NOTE             0000000000400254  00000254\n       0000000000000020  0000000000000000   A       0     0     4\n  [ 3] .note.gnu.build-i NOTE             0000000000400274  00000274\n       0000000000000024  0000000000000000   A       0     0     4\n  [ 4] .gnu.hash         GNU_HASH         0000000000400298  00000298\n       0000000000000030  0000000000000000   A       5     0     8\n  [ 5] .dynsym           DYNSYM           00000000004002c8  000002c8\n       0000000000000138  0000000000000018   A       6     1     8\n  [ 6] .dynstr           STRTAB           0000000000400400  00000400\n       0000000000000180  0000000000000000   A       0     0     1\n  [ 7] .gnu.version      VERSYM           0000000000400580  00000580\n       000000000000001a  0000000000000002   A       5     0     2\n  [ 8] .gnu.version_r    VERNEED          00000000004005a0  000005a0\n       0000000000000040  0000000000000000   A       6     2     8\n  [ 9] .rela.dyn         RELA             00000000004005e0  000005e0\n       0000000000000030  0000000000000018   A       5     0     8\n  [10] .rela.plt         RELA             0000000000400610  00000610\n       00000000000000c0  0000000000000018   A       5    12     8\n  [11] .init             PROGBITS         00000000004006d0  000006d0\n       000000000000001a  0000000000000000  AX       0     0     4\n  [12] .plt              PROGBITS         00000000004006f0  000006f0\n       0000000000000090  0000000000000010  AX       0     0     16\n  [13] .text             PROGBITS         0000000000400780  00000780\n       00000000000001e4  0000000000000000  AX       0     0     16\n  [14] .fini             PROGBITS         0000000000400964  00000964\n       0000000000000009  0000000000000000  AX       0     0     4\n  [15] .rodata           PROGBITS         0000000000400970  00000970\n       000000000000001c  0000000000000000   A       0     0     8\n  [16] .eh_frame_hdr     PROGBITS         000000000040098c  0000098c\n       0000000000000044  0000000000000000   A       0     0     4\n  [17] .eh_frame         PROGBITS         00000000004009d0  000009d0\n       0000000000000134  0000000000000000   A       0     0     8\n  [18] .init_array       INIT_ARRAY       0000000000600dd8  00000dd8\n       0000000000000010  0000000000000000  WA       0     0     8\n  [19] .fini_array       FINI_ARRAY       0000000000600de8  00000de8\n       0000000000000008  0000000000000000  WA       0     0     8\n  [20] .jcr              PROGBITS         0000000000600df0  00000df0\n       0000000000000008  0000000000000000  WA       0     0     8\n  [21] .dynamic          DYNAMIC          0000000000600df8  00000df8\n       0000000000000200  0000000000000010  WA       6     0     8\n  [22] .got              PROGBITS         0000000000600ff8  00000ff8\n       0000000000000008  0000000000000008  WA       0     0     8\n  [23] .got.plt          PROGBITS         0000000000601000  00001000\n       0000000000000058  0000000000000008  WA       0     0     8\n  [24] .data             PROGBITS         0000000000601058  00001058\n       0000000000000004  0000000000000000  WA       0     0     4\n  [25] .bss              NOBITS           0000000000601060  0000105c\n       0000000000000118  0000000000000000  WA       0     0     32\n  [26] .comment          PROGBITS         0000000000000000  0000105c\n       000000000000002c  0000000000000001  MS       0     0     1\n  [27] .shstrtab         STRTAB           0000000000000000  00001088\n       0000000000000108  0000000000000000           0     0     1\n  [28] .symtab           SYMTAB           0000000000000000  00001910\n       00000000000006f0  0000000000000018          29    48     8\n  [29] .strtab           STRTAB           0000000000000000  00002000\n       000000000000039f  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)\n  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)\n  O (extra OS processing required) o (OS specific), p (processor specific)\n")])])]),t("p",[n._v("（8）查看一个包含调试信息的可执行的 ELF 文件的节头信息。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("readelf -S main.debug.out\nThere are 35 section headers, starting at offset 0x3928:\n\nSection Headers:\n  [Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .interp           PROGBITS         0000000000400238  00000238\n       000000000000001c  0000000000000000   A       0     0     1\n  [ 2] .note.ABI-tag     NOTE             0000000000400254  00000254\n       0000000000000020  0000000000000000   A       0     0     4\n  [ 3] .note.gnu.build-i NOTE             0000000000400274  00000274\n       0000000000000024  0000000000000000   A       0     0     4\n  [ 4] .gnu.hash         GNU_HASH         0000000000400298  00000298\n       0000000000000030  0000000000000000   A       5     0     8\n  [ 5] .dynsym           DYNSYM           00000000004002c8  000002c8\n       0000000000000138  0000000000000018   A       6     1     8\n  [ 6] .dynstr           STRTAB           0000000000400400  00000400\n       0000000000000180  0000000000000000   A       0     0     1\n  [ 7] .gnu.version      VERSYM           0000000000400580  00000580\n       000000000000001a  0000000000000002   A       5     0     2\n  [ 8] .gnu.version_r    VERNEED          00000000004005a0  000005a0\n       0000000000000040  0000000000000000   A       6     2     8\n  [ 9] .rela.dyn         RELA             00000000004005e0  000005e0\n       0000000000000030  0000000000000018   A       5     0     8\n  [10] .rela.plt         RELA             0000000000400610  00000610\n       00000000000000c0  0000000000000018   A       5    12     8\n  [11] .init             PROGBITS         00000000004006d0  000006d0\n       000000000000001a  0000000000000000  AX       0     0     4\n  [12] .plt              PROGBITS         00000000004006f0  000006f0\n       0000000000000090  0000000000000010  AX       0     0     16\n  [13] .text             PROGBITS         0000000000400780  00000780\n       00000000000001e4  0000000000000000  AX       0     0     16\n  [14] .fini             PROGBITS         0000000000400964  00000964\n       0000000000000009  0000000000000000  AX       0     0     4\n  [15] .rodata           PROGBITS         0000000000400970  00000970\n       000000000000001c  0000000000000000   A       0     0     8\n  [16] .eh_frame_hdr     PROGBITS         000000000040098c  0000098c\n       0000000000000044  0000000000000000   A       0     0     4\n  [17] .eh_frame         PROGBITS         00000000004009d0  000009d0\n       0000000000000134  0000000000000000   A       0     0     8\n  [18] .init_array       INIT_ARRAY       0000000000600dd8  00000dd8\n       0000000000000010  0000000000000000  WA       0     0     8\n  [19] .fini_array       FINI_ARRAY       0000000000600de8  00000de8\n       0000000000000008  0000000000000000  WA       0     0     8\n  [20] .jcr              PROGBITS         0000000000600df0  00000df0\n       0000000000000008  0000000000000000  WA       0     0     8\n  [21] .dynamic          DYNAMIC          0000000000600df8  00000df8\n       0000000000000200  0000000000000010  WA       6     0     8\n  [22] .got              PROGBITS         0000000000600ff8  00000ff8\n       0000000000000008  0000000000000008  WA       0     0     8\n  [23] .got.plt          PROGBITS         0000000000601000  00001000\n       0000000000000058  0000000000000008  WA       0     0     8\n  [24] .data             PROGBITS         0000000000601058  00001058\n       0000000000000004  0000000000000000  WA       0     0     4\n  [25] .bss              NOBITS           0000000000601060  0000105c\n       0000000000000118  0000000000000000  WA       0     0     32\n  [26] .comment          PROGBITS         0000000000000000  0000105c\n       000000000000002c  0000000000000001  MS       0     0     1\n  [27] .debug_aranges    PROGBITS         0000000000000000  00001088\n       0000000000000030  0000000000000000           0     0     1\n  [28] .debug_info       PROGBITS         0000000000000000  000010b8\n       00000000000014f9  0000000000000000           0     0     1\n  [29] .debug_abbrev     PROGBITS         0000000000000000  000025b1\n       000000000000039f  0000000000000000           0     0     1\n  [30] .debug_line       PROGBITS         0000000000000000  00002950\n       0000000000000241  0000000000000000           0     0     1\n  [31] .debug_str        PROGBITS         0000000000000000  00002b91\n       0000000000000c4e  0000000000000001  MS       0     0     1\n  [32] .shstrtab         STRTAB           0000000000000000  000037df\n       0000000000000148  0000000000000000           0     0     1\n  [33] .symtab           SYMTAB           0000000000000000  000041e8\n       0000000000000768  0000000000000018          34    53     8\n  [34] .strtab           STRTAB           0000000000000000  00004950\n       000000000000039f  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)\n  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)\n  O (extra OS processing required) o (OS specific), p (processor specific)\n")])])]),t("p",[n._v('可见，相对非调试版本的可执行文件，多了些".debug*"节的信息。')]),n._v(" "),t("p",[n._v("（9）查看一个目标文件的 ELF 文件的节头信息。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("readelf -S print.o\nThere are 15 section headers, starting at offset 0x1e8:\n\nSection Headers:\n  [Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .text             PROGBITS         0000000000000000  00000040\n       0000000000000074  0000000000000000  AX       0     0     4\n  [ 2] .rela.text        RELA             0000000000000000  00000900\n       0000000000000108  0000000000000018          13     1     8\n  [ 3] .data             PROGBITS         0000000000000000  000000b4\n       0000000000000000  0000000000000000  WA       0     0     4\n  [ 4] .bss              NOBITS           0000000000000000  000000b4\n       0000000000000001  0000000000000000  WA       0     0     4\n  [ 5] .rodata           PROGBITS         0000000000000000  000000b4\n       0000000000000008  0000000000000000   A       0     0     1\n  [ 6] .init_array       INIT_ARRAY       0000000000000000  000000c0\n       0000000000000008  0000000000000000  WA       0     0     8\n  [ 7] .rela.init_array  RELA             0000000000000000  00000a08\n       0000000000000018  0000000000000018          13     6     8\n  [ 8] .comment          PROGBITS         0000000000000000  000000c8\n       000000000000002d  0000000000000001  MS       0     0     1\n  [ 9] .note.GNU-stack   PROGBITS         0000000000000000  000000f5\n       0000000000000000  0000000000000000           0     0     1\n  [10] .eh_frame         PROGBITS         0000000000000000  000000f8\n       0000000000000078  0000000000000000   A       0     0     8\n  [11] .rela.eh_frame    RELA             0000000000000000  00000a20\n       0000000000000048  0000000000000018          13    10     8\n  [12] .shstrtab         STRTAB           0000000000000000  00000170\n       0000000000000072  0000000000000000           0     0     1\n  [13] .symtab           SYMTAB           0000000000000000  000005a8\n       0000000000000210  0000000000000018          14    13     8\n  [14] .strtab           STRTAB           0000000000000000  000007b8\n       0000000000000145  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)\n  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)\n  O (extra OS processing required) o (OS specific), p (processor specific)\n")])])]),t("p",[n._v("（10）查看一个静态库文件的 ELF 文件的节头信息。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("readelf -S libprint.a\n\nFile: libprint.a(print.o)\nThere are 15 section headers, starting at offset 0x1e8:\n\nSection Headers:\n  [Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .text             PROGBITS         0000000000000000  00000040\n       0000000000000074  0000000000000000  AX       0     0     4\n  [ 2] .rela.text        RELA             0000000000000000  00000900\n       0000000000000108  0000000000000018          13     1     8\n  [ 3] .data             PROGBITS         0000000000000000  000000b4\n       0000000000000000  0000000000000000  WA       0     0     4\n  [ 4] .bss              NOBITS           0000000000000000  000000b4\n       0000000000000001  0000000000000000  WA       0     0     4\n  [ 5] .rodata           PROGBITS         0000000000000000  000000b4\n       0000000000000008  0000000000000000   A       0     0     1\n  [ 6] .init_array       INIT_ARRAY       0000000000000000  000000c0\n       0000000000000008  0000000000000000  WA       0     0     8\n  [ 7] .rela.init_array  RELA             0000000000000000  00000a08\n       0000000000000018  0000000000000018          13     6     8\n  [ 8] .comment          PROGBITS         0000000000000000  000000c8\n       000000000000002d  0000000000000001  MS       0     0     1\n  [ 9] .note.GNU-stack   PROGBITS         0000000000000000  000000f5\n       0000000000000000  0000000000000000           0     0     1\n  [10] .eh_frame         PROGBITS         0000000000000000  000000f8\n       0000000000000078  0000000000000000   A       0     0     8\n  [11] .rela.eh_frame    RELA             0000000000000000  00000a20\n       0000000000000048  0000000000000018          13    10     8\n  [12] .shstrtab         STRTAB           0000000000000000  00000170\n       0000000000000072  0000000000000000           0     0     1\n  [13] .symtab           SYMTAB           0000000000000000  000005a8\n       0000000000000210  0000000000000018          14    13     8\n  [14] .strtab           STRTAB           0000000000000000  000007b8\n       0000000000000145  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)\n  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)\n  O (extra OS processing required) o (OS specific), p (processor specific)\n")])])]),t("p",[n._v("（11）查看一个动态库文件的 ELF 文件的节头信息。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("readelf -S libprint.so\nThere are 28 section headers, starting at offset 0x1170:\n\nSection Headers:\n  [Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .note.gnu.build-i NOTE             00000000000001c8  000001c8\n       0000000000000024  0000000000000000   A       0     0     4\n  [ 2] .gnu.hash         GNU_HASH         00000000000001f0  000001f0\n       000000000000003c  0000000000000000   A       3     0     8\n  [ 3] .dynsym           DYNSYM           0000000000000230  00000230\n       00000000000001e0  0000000000000018   A       4     2     8\n  [ 4] .dynstr           STRTAB           0000000000000410  00000410\n       00000000000001ab  0000000000000000   A       0     0     1\n  [ 5] .gnu.version      VERSYM           00000000000005bc  000005bc\n       0000000000000028  0000000000000002   A       3     0     2\n  [ 6] .gnu.version_r    VERNEED          00000000000005e8  000005e8\n       0000000000000040  0000000000000000   A       4     2     8\n  [ 7] .rela.dyn         RELA             0000000000000628  00000628\n       0000000000000120  0000000000000018   A       3     0     8\n  [ 8] .rela.plt         RELA             0000000000000748  00000748\n       0000000000000090  0000000000000018   A       3    10     8\n  [ 9] .init             PROGBITS         00000000000007d8  000007d8\n       000000000000001a  0000000000000000  AX       0     0     4\n  [10] .plt              PROGBITS         0000000000000800  00000800\n       0000000000000070  0000000000000010  AX       0     0     16\n  [11] .text             PROGBITS         0000000000000870  00000870\n       0000000000000174  0000000000000000  AX       0     0     16\n  [12] .fini             PROGBITS         00000000000009e4  000009e4\n       0000000000000009  0000000000000000  AX       0     0     4\n  [13] .rodata           PROGBITS         00000000000009ed  000009ed\n       0000000000000008  0000000000000000   A       0     0     1\n  [14] .eh_frame_hdr     PROGBITS         00000000000009f8  000009f8\n       000000000000002c  0000000000000000   A       0     0     4\n  [15] .eh_frame         PROGBITS         0000000000000a28  00000a28\n       00000000000000a4  0000000000000000   A       0     0     8\n  [16] .init_array       INIT_ARRAY       0000000000200da8  00000da8\n       0000000000000010  0000000000000000  WA       0     0     8\n  [17] .fini_array       FINI_ARRAY       0000000000200db8  00000db8\n       0000000000000008  0000000000000000  WA       0     0     8\n  [18] .jcr              PROGBITS         0000000000200dc0  00000dc0\n       0000000000000008  0000000000000000  WA       0     0     8\n  [19] .data.rel.ro      PROGBITS         0000000000200dc8  00000dc8\n       0000000000000008  0000000000000000  WA       0     0     8\n  [20] .dynamic          DYNAMIC          0000000000200dd0  00000dd0\n       00000000000001f0  0000000000000010  WA       4     0     8\n  [21] .got              PROGBITS         0000000000200fc0  00000fc0\n       0000000000000040  0000000000000008  WA       0     0     8\n  [22] .got.plt          PROGBITS         0000000000201000  00001000\n       0000000000000048  0000000000000008  WA       0     0     8\n  [23] .bss              NOBITS           0000000000201048  00001048\n       0000000000000008  0000000000000000  WA       0     0     4\n  [24] .comment          PROGBITS         0000000000000000  00001048\n       000000000000002c  0000000000000001  MS       0     0     1\n  [25] .shstrtab         STRTAB           0000000000000000  00001074\n       00000000000000f9  0000000000000000           0     0     1\n  [26] .symtab           SYMTAB           0000000000000000  00001870\n       0000000000000600  0000000000000018          27    46     8\n  [27] .strtab           STRTAB           0000000000000000  00001e70\n       0000000000000335  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)\n  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)\n  O (extra OS processing required) o (OS specific), p (processor specific)\n")])])]),t("hr"),n._v(" "),t("h2",{attrs:{id:"参考文献"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[n._v("#")]),n._v(" 参考文献")]),n._v(" "),t("p",[t("a",{attrs:{href:"http://man7.org/linux/man-pages/man1/readelf.1.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("readelf(1) - Linux manual page - man7.org"),t("OutboundLink")],1)]),n._v(" "),t("p",[t("a",{attrs:{href:"http://man.linuxde.net/readelf",target:"_blank",rel:"noopener noreferrer"}},[n._v("Linux命令大全.readelf命令"),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("俞甲子,石凡,等.程序员的自我修养——链接、装载与库[M].北京:电子工业出版社,2009-04.C3.1目标文件的格式.P56-57")]),n._v(" "),t("Vssue",{attrs:{title:"readelf"}})],1)}),[],!1,null,null,null);t.default=s.exports}}]);