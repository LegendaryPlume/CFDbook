(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{517:function(t,n,a){"use strict";a.r(n);var e=a(12),r=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"_1-命令简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-命令简介"}},[t._v("#")]),t._v(" 1.命令简介")]),t._v(" "),n("p",[t._v("ld（Link eDitor）命令是二进制工具集 "),n("a",{attrs:{href:"https://www.gnu.org/software/binutils/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GNU Binutils"),n("OutboundLink")],1),t._v(" 的一员，是 GNU 链接器，用于将目标文件与库链接为可执行文件或库文件。")]),t._v(" "),n("h2",{attrs:{id:"_2-命令格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-命令格式"}},[t._v("#")]),t._v(" 2.命令格式")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("ld [OPTIONS] OBJFILES\n")])])]),n("h2",{attrs:{id:"_3-选项说明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-选项说明"}},[t._v("#")]),t._v(" 3.选项说明")]),t._v(" "),n("p",[t._v("ld 命令支持众多链接选项，但是大部分选项很少被使用，下面是 GNU ld 命令接受的选项。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('-b <input-format>\n\t指定目标代码输入文件的格式\n-Bstatic\n\t只使用静态库\n-Bdynamic\n\t只使用动态库\n-Bsymbolic\n\t把引用捆绑到共享库中的全局符号\n-c <MRI-commandfile>, --mri-script=<MRI-commandfile>\n\t为与 MRI 链接器兼容，ld 接受由 MRI 命令语言编写的脚本文件\n--cref\n\t创建跨引用表\n-d,-dc,-dp\n\t即使指定了可重定位的输出文件（使用-r），也会为公共符号分配空间。脚本命令“FORCE_COMMON_ALLOCATION”具有相同的效果\n-defsym\n\t在输出文件中创建指定的全局符号\n-demangle\n\t在错误消息中还原符号名称\n-e <entry>\n\t使用指定的符号作为程序的初始执行点\n-E,--export-dynamic\n\t对于ELF格式文件，创建动态链接的可执行文件时，把所有符号添加到动态符号表\n-f <name>, --auxiliary=<name>\n\t对于 ELF 格式共享对象，设置 DT_AUXILIARY 名称\n-F <name>, --filter=<name>\n\t对于ELF格式共享对象，设置 DT_FILTER 名称。这告诉动态链接器，正在创建的共享对象的符号表应该用作共享对象名称的符号表的筛选器。\n-g\n\t被忽略。用于提供和其他工具的兼容性\n-h\n\t对于 ELF 格式共享对象，设置 DT_SONAME 名称\n-I<file>, -dynamic-linker <file>, --dynamic-linker=<file>\n\t指定动态链接器。这仅在生成依赖动态链接库的 ELF 可执行文件时才有意义。默认的动态链接器通常是正确的，除非您知道正在做什么，否则不要使用该选项。\n-l <namespec>, --library=<namespec>\n\t把指定的库文件添加到要链接的文件清单\n-L <searchdir>, --library-path=searchdir\n\t把指定的路径添加添加到搜索库的目录清单\n-M, --print-map\n\t显示链接映射，用于诊断目的\n-Map=<mapfile>:\n\t将链接映射输出到指定的文件\n-m <emulation>\n\t模拟指定的链接器\n-N,--omagic\n\t指定读取/写入文本和数据段\n-n,--nmagic\n\t关闭节的页面对齐，并禁用对共享库的链接。如果输出格式支持Unix样式的幻数，则将输出标记为"NMAGIC"\n-noinhibit-exec\n\t生成输出文件，即使出现非致命链接错误。通常，如果链接器在链接过程中遇到错误，它将不会生成输出文件。\n-no-keep-memory\n\tld 通常在内存中缓存输入文件的符号表来优化内存使用速度。此选项告诉 ld 不要缓存符号表。当链接大型可执行文件时，如果ld耗尽内存空间，则可能需要使用该选项\n-O <level>\n\t对于非零的优化等级，ld将优化输出。此操作会比较耗时，应该在生成最终的结果时使用。\n-o <output>, --output=<output>\n\t指定输出文件的名称\n-oformat=<output-format>\n\t指定输出文件的二进制格式\n-R <filename>,--just-symbols=<filename>\n\t从指定的文件读取符号名称和地址\n-r,--relocatable\n\t生成可重定位的输出（称为部分连接）\n-rpath=<dir>\n\t把指定的目录添加到运行时库搜索路径\n-rpath-link=<dir>\n\t指定搜索运行时共享库的目录\n-S,--strip-debug\n\t忽略来自输出文件的调试器符号信息\n-s,--strip-all\n\t忽略来自输出文件的所有符号信息\n-shared, -Bshareable\n\t创建共享库\n-split-by-file[=size]\n\t为每个目标文件在输出文件中创建额外的段大小达到size。size默认为1\n-split-by-reloc[=count]\n\t按照指定的长度在输出文件中创建额外的段\n--section-start=<sectionname>=<org>\n\t在输出文件中指定的地址定位指定的段\n-T <scriptfile>, --script=<scriptfile>\n\t使用 scriptfile 作为链接器脚本。此脚本将替换 ld 的默认链接器脚本（而不是添加到其中），因此脚本必须指定输出文件所需的所有内容。如果当前目录中不存在脚本文件，ld 会在 -L 选项指定的目录中查找\n-Ttext=<org>\n\t使用指定的地址作为文本段的起始点\n-Tdata=<org>\n\t使用指定的地址作为数据段的起始点\n-Tbss=<org>\n\t使用指定的地址作为bss段的起始点\n-t,--trace\n\t在处理输入文件时显示它们的名称\n-u <symbol>, --undefined=<symbol>\n\t强制指定符号在输出文件中作为未定义符号\n-v, -V, --version\n\t示ld版本号\n-warn-common\n\t当一个通用符号和另一个通用符号结合时发出警告\n-warn-constructors\n\t如果没有使用任何全局构造器，则发出警告\n-warn-once\n\t对于每个未定义的符号只发出一次警告\n-warn-section-align\n\t如果为了对齐而改动了输出段地址，则发出警告\n--whole-archive\n\t对于指定的存档文件，在存档中包含所有文件\n-X, --discard-locals\n\t删除所有本地临时符号\n-x, --discard-al\n\t删除所有本地符号\n')])])]),n("h2",{attrs:{id:"_4-常用示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-常用示例"}},[t._v("#")]),t._v(" 4.常用示例")]),t._v(" "),n("p",[t._v("（1）链接目标文件生成可执行文件。如给定 C++ 目标文件 test.o 与 main.o，生成可执行文件 test.out。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("ld /usr/lib64/crt1.o /usr/lib64/crti.o /usr/lib64/crtn.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtbegin.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtend.o -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5 -L/usr/lib64 -L/usr/lib -lstdc++ "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-lm")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-lgcc_s")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-lc")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-lgcc")]),t._v("  main.o test.o "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-o")]),t._v(" test.out\n")])])]),n("p",[t._v("因为生成一个C++可执行文件，需要依赖很多系统库和相关的目标文件，比如C语言库libc.a，所以使用ld进行链接时，需要注意添加较长的命令选项，不然会报链接错误。使用g++ -v命令可以查看最后一行collect2使用的命令选项，进而了解生成可执行文所需的相关依赖。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("g++ "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v(" main.o test.o\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nusr/libexec/gcc/x86_64-redhat-linux/4.8.5/collect2 --build-id --no-add-needed --eh-frame-hdr --hash-style"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("gnu "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" elf_x86_64 -dynamic-linker /lib64/ld-linux-x86-64.so.2 /usr/lib64/crt1.o /usr/lib64/crti.o /usr/lib64/crtn.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtbegin.o /usr/lib/gcc/x86_64-redhat-linux/4.8.5/crtend.o -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5 -L/usr/lib64 -L/usr/lib -lstdc++ "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-lm")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-lgcc_s")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-lc")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-lgcc")]),t._v("  main.o test.o\n")])])]),n("hr"),t._v(" "),n("h2",{attrs:{id:"参考文献"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.gnu.org/software/binutils/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GNU Binutils"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/ld.1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ld(1) - Linux manual page - man7.org"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Linker_(computing)",target:"_blank",rel:"noopener noreferrer"}},[t._v("wikipedia.Linker (computing)"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("a",{attrs:{href:"https://dablelv.blog.csdn.net/article/details/88094902",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用ld命令链接目标文件生成可执行文件"),n("OutboundLink")],1)]),t._v(" "),n("Vssue",{attrs:{title:"ld"}})],1)}),[],!1,null,null,null);n.default=r.exports}}]);