(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{377:function(a,t,s){"use strict";s.r(t);var e=s(10),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"_1-命令简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-命令简介"}},[a._v("#")]),a._v(" 1.命令简介")]),a._v(" "),t("p",[a._v("AWK 是文本处理语言，是一个强大的文本分析工具，是 Unix/Linux 环境中功能强大的数据处理引擎之一。数据可以来自标准输入（stdin）、一个或多个文件或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是 Unix/Linux 下一个强大的编程工具。")]),a._v(" "),t("p",[a._v("AWK 有很多内建的功能，比如数组、函数等，这是它和 C 语言的相同之处，灵活性是 AWK 最大的优势。简单来说 AWK 就是把文件逐行的读入，以空格和 Tab 为默认分隔符将每行切片，切开的部分再进行各种分析处理。")]),a._v(" "),t("p",[a._v("AWK  名称来自于它的三位创始人 Alfred "),t("strong",[a._v("A")]),a._v("ho、Peter Jay "),t("strong",[a._v("W")]),a._v("einberger 和 Brian "),t("strong",[a._v("K")]),a._v("ernighan 姓氏的首个字母。AWK 有多个版本：awk, nawk, mawk 和 gawk，未作特别说明，一般指 gawk。gawk 是 AWK 的 GNU 版本。")]),a._v(" "),t("h2",{attrs:{id:"_2-命令格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-命令格式"}},[a._v("#")]),a._v(" 2.命令格式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("awk [OPTIONS]\nawk [OPTIONS] 'PATTERN{ACTION}' FILE...\n")])])]),t("p",[a._v("其中 PATTERN 一般为正则表达式，用斜杠括起来，用来查找匹配的行。ACTION 是在找到匹配的行时所执行的一系列命令。花括号 {} 对一系列指令进行功能分组，不需要始终出现。")]),a._v(" "),t("p",[a._v("尽管操作可能会很复杂，但语法总是这样。awk 通常用来格式化文本文件中的信息，是以文件的行为处理单位，每接收文件的一行，然后执行相应的命令来处理文本。")]),a._v(" "),t("p",[t("strong",[a._v("注意：")]),a._v("\n（1）PATTERN 缺省为 1，表示永真，ACTION 缺省为 print。\n（2）PATTERN + {ACTION} 可以同时存在多个，每个 PATTERN 之间的关系是或，只要当前行匹配 PATTERN，则执行 PATTERN 后大括号中的 action。")]),a._v(" "),t("h2",{attrs:{id:"_3-匹配模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-匹配模式"}},[a._v("#")]),a._v(" 3.匹配模式")]),a._v(" "),t("p",[a._v("awk 的 PATTERN 可能是以下情况之一：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("BEGIN\nEND\nBEGINFILE\nENDFILE\n/regular expression/\nrelational expression\npattern && pattern\npattern || pattern\n! pattern\npattern ? pattern : pattern\n(pattern)\npattern1, pattern2\n")])])]),t("p",[a._v("BEGIN 和 END 是两个特殊的模式，不会对输入的内容进行测试。BEGIN 后的 action 在 awk 读取文本前执行，END 后的 action 在 awk 结束前执行。模式表达式中的 BEGIN 和 END 模式不能与其他模式组合。")]),a._v(" "),t("p",[a._v("BEGINFILE 和 ENDFILE 是额外的两个特殊模式，BEGINFILE 的 action 在读取每个命令行输入文件的第一条记录之前执行，ENDFILE 的 action 在读取每个文件的最后一条记录之后执行。与 BEGIN 和 END 的区别是，如果给定多个文件，BEGINFILE 和 ENDFILE 的 action 将被执行多次，而 BEGIN 和 END 不管是否给定文件，其 action 只会执行一次。")]),a._v(" "),t("p",[a._v("/regular expression/ 表示正则表达式，用于选择符合指定 pattern 的行。")]),a._v(" "),t("p",[a._v("relational expression 表示正则表达式的关系式，即多个正则表达式通过运算符进行组合。常见组合有：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("pattern && pattern\n\t逻辑与式，两个 pattern 同时满足才算满足\npattern || pattern\n\t逻辑或式，只要有一个 pattern 满足即满足\n! pattern\n\t逻辑非式，不符合 pattern 则为 true\npattern ? pattern : pattern\n\t条件运算符式，第一个 pattern 满足则判断第二个 pattern，否则判断第三个 pattern\n(pattern)\n\t括号用于改变 pattern 运算的优先级\npattern1, pattern2\n\t表示一个范围，用于选择所有记录行中第一个符合 pattern1 的记录到下一个符合 pattern2 的记录之间的记录\n")])])]),t("h2",{attrs:{id:"_4-选项说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-选项说明"}},[a._v("#")]),a._v(" 4.选项说明")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("-C, --copyright\n\t显示版权信息并退出\n-c, --traditional\n\t是 awk 运行在兼容模式下，gawk 的任何扩展都不会生效\n-d, --dump-variables[=FILE]\n\t将 awk 排序后的全局变量的类型和值打印到指定的文件中，如果没有指定 FILE，则在当前目录默认生成一个 awkvars.out\n-E, --exec FILE\n\t功能类似于选项 -f，但脚本文件需要以 #! 开头；另外命令行的变量将不再生效\n-e, --source PROGRAM_TEXT\n\t指定 awk 的源码文件\n-F, --field-separator FS\n\t使用字符或字符串 FS 作为域分隔符。可以同时指定多个域分隔符，此时需要使用一对中括号括起来。例如使用-和|可写作 -F '[-|]'。如果用[]作为分隔符，可写作-F '[][]'。不指定分隔符，默认为空格和 Tab。注意，使用 -F' '显示指定空格时，Tab 也会被作为分隔符。使用 [] 指定多个分隔符时，又想使多个分隔符组成的字符串也作为分隔符，在 [] 后添加一个 +，如 -F\"[ab]+\"，那么分隔符有三个，a，b 和 ab\n-f, --file PROGRAM_FILE\n\t从指定的 awk 脚本文件 PROGRAM_FILE 读取 awk 指令\n-g, --gen-pot\n\t解析 awk 程序，产生 .po（Portable Object Template） 格式的文件到标准输出，来标明程序中每一个可本地化的字符串位置\n-h, --help\n\t显示简要的帮助信息并退出\n-L, --lint[=VALUE]\n\t打印有关在其它版本 awk 中出现可疑的或不可移植结构的警告。该选项提供了一个可选的参数 fatal，即将警告视为致命的错误\n-m{f|r} VAL\n\t-mf 将最大字段数设为 VAL；-mr 将最大记录数设为 VAL。这两个功能是 Bell 实验室版awk 的扩展功能，在标准 awk 中不适用\n-N, --use-lc-numeric\n\t使用本地小数点解析输入的数据\n-n, --non-decimal-data\n\t识别输入数据中八进制和十六进制数\n-O, --optimize\n\t在程序的内部表示上启用优化。目前，这只包括简单的常量折叠。gawk 维护者希望随着时间的推移增加额外的优化\n-P, --posix\n\t打开兼容模式，会出现以下限制：\n\t不识别 \\x；\n\t当域分隔符 FS 是一个空格时，只有空格和 Tab 能作为域分隔符，换行符将不能作为一个域分隔符；\n\t在 ? 和 : 之后，不能继续当前行；\n\t函数关键字 func 将不能被识别；\n\t操作符 ** 和 **= 不能代替 ^ 和 ^=；\n\tfflush 函数无效。\n-R, --command FILE\n\t只限于 Dgawk。从文件中读取调试器命令\n-r, --re-interval\n\t允许间隔正则表达式的使用。为默认选项\n-S, --sandbox\n\t在沙盒模式下运行gawk，禁用 system() 函数，使用 getline 进行输入重定向，使用 print 和 printf 进行输出重定向，以及加载动态扩展。命令执行也被禁用，这有效地阻止了脚本访问本地资源\n-t, --lint-old\n\t打印关于不能向传统 Unix awk 移植的构造的警告\n--profile[=FILE]\n\t输出性能分析报告至指定的文件，默认输出到 awkprof.out\n-V, --version\n\t打印版本信息并退出\n-v, --assign VAR=VAL\n\t定义一个 awk 变量并赋值，可以将外部变量传递给 awk\n--\n\t标识命令选项结束\n")])])]),t("h2",{attrs:{id:"_5-调用方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-调用方式"}},[a._v("#")]),a._v(" 5.调用方式")]),a._v(" "),t("p",[a._v("有三种方式调用 awk。")]),a._v(" "),t("p",[a._v("（1）命令行方式。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-F FS"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'PATTERN + {ACTION}'")]),a._v("  FILE"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n")])])]),t("p",[a._v("在 awk 中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指明域分隔符的情况下，默认为空格和 Tab。")]),a._v(" "),t("p",[a._v("（2）Shell 脚本方式。\n将所有的 awk 命令插入一个文件，脚本中在首行注明使用 awk 命令来解析执行，相当于将 Shell 脚本首行的"),t("code",[a._v("#!/bin/sh")]),a._v("换成"),t("code",[a._v("#!/bin/awk")]),a._v("，最后通过键入脚本名称来调用。")]),a._v(" "),t("p",[a._v("（3）将所有的 awk 命令插入到一个单独文件，然后使用 -f 选项调用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("awk -f awk-script-file FILE...\n")])])]),t("p",[a._v("其中，-f 选项加载 awk-script-file 中的 awk 脚本，FILE... 跟上面的是一样的。")]),a._v(" "),t("h2",{attrs:{id:"_6-内置变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-内置变量"}},[a._v("#")]),a._v(" 6.内置变量")]),a._v(" "),t("p",[a._v("gawk 有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出常见的内置变量说明。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$0")]),a._v("\t\t\t\t当前处理行\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$n")]),a._v("\t\t\t\t当前记录的第 n 个字段，n 从 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" 开始，字段间由 FS 分隔\nARGC           \t命令行参数个数\nARGIND \t\t\t当前处理命令行中的第几个文件，文件下标从 "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" 开始\nARGV            命令行参数数组\nCONVFMT\t\t\t数字转换格式，默认值为%.6g\nENVIRON         支持队列中系统环境变量的使用\nERRNO\t\t\t最后一个系统错误的描述\nFIELDWIDTHS\t\t字段宽度列表"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("用空格键分隔"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nFILENAME        awk浏览的文件名\nFNR             当前被处理文件的记录数\nFS              设置输入域分隔符，等价于命令行-F选项\nIGNORECASE\t\t如果为真，则进行忽略大小写的匹配\nLINT\t\t\t动态控制--lint选项是否生效，为false不生效，为true则生效；\nNF              浏览记录的域的个数\nNR              已读的记录数\nOFMT\t\t\t数字的输出格式，默认值是%.6g\nOFS             输出域分隔符\nORS             输出记录分隔符\t\t\t\t\nRS              The input record separator，输入记录的分隔符，默认为换行符\nRT\t\t\t\tThe record terminator，输入记录的结束符\t\t\nRSTART\t\t\t由 match 函数所匹配的字符串的第一个位置\nRLENGTH\t\t\t由 match 函数所匹配的字符串的长度\nSUBSEP\t\t\t数组下标分隔符（默认值是 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("034）\nTEXTDOMAIN\t\t"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" 程序所使用的文本所处的地域\n")])])]),t("h2",{attrs:{id:"_7-编程示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-编程示例"}},[a._v("#")]),a._v(" 7.编程示例")]),a._v(" "),t("h3",{attrs:{id:"_7-1-基础打印输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-基础打印输出"}},[a._v("#")]),a._v(" 7.1 基础打印输出")]),a._v(" "),t("p",[a._v("（1）假设 last -n 5 的输出如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("root     pts/1   192.168.1.100  Tue Feb 10 11:21   still logged in\nroot     pts/1   192.168.1.100  Tue Feb 10 00:46 - 02:28  (01:41)\nroot     pts/1   192.168.1.100  Mon Feb  9 11:41 - 18:30  (06:48)\ndmtsai   pts/1   192.168.1.100  Mon Feb  9 11:41 - 11:41  (00:00)\nroot     tty1                   Fri Sep  5 14:09 - 14:10  (00:01)\n")])])]),t("p",[a._v("如果只是显示最近登录的5个帐号：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("last -n 5 | awk  '{print $1}'\nroot\nroot\nroot\ndmtsai\nroot\n")])])]),t("p",[a._v("awk 工作流程是这样的：读入有换行符分隔的一条记录，然后将记录按指定的域分隔符划分，"),t("code",[a._v("$0")]),a._v("则表示所有域，"),t("code",[a._v("$1")]),a._v("表示第一个域，"),t("code",[a._v("$n")]),a._v("表示第 n 个域。默认域分隔符是空格或 Tab 符，所以"),t("code",[a._v("$1")]),a._v("表示登录用户，"),t("code",[a._v("$3")]),a._v("表示登录用户 ip，以此类推。")]),a._v(" "),t("p",[a._v("（2）如果想显示 /etc/passwd 配置文件中的账户以及账户对应的 Shell，而账户与 Shell 之间以Tab符分隔。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" /etc/passwd "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-F")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("':'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'{print $1\"\\t\"$7}'")]),a._v("\nroot    /bin/bash\ndaemon  /bin/sh\nbin     /bin/sh\nsys     /bin/sh\n")])])]),t("p",[a._v("注意，这里使用了 -F 指定域分隔符为冒号 :。")]),a._v(" "),t("p",[a._v("（3）如果只是显示 /etc/passwd 的账户和账户对应的 Shell，而账户与 Shell 之间以逗号分隔，而且在所有行添加列名 name,shell，在最后一行添加 blue,/bin/nosh。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" /etc/passwd "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-F")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("':'")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('\'BEGIN {print "name,shell"}  {print $1","$7} END {print "blue,/bin/nosh"}\'')]),a._v("\nname,shell\nroot,/bin/bash\ndaemon,/bin/sh\nbin,/bin/sh\nsys,/bin/sh\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("\nblue,/bin/nosh\n")])])]),t("p",[a._v("awk 工作流程是这样的：先执行 BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域，"),t("code",[a._v("$1")]),a._v("表示第一个域，"),t("code",[a._v("$n")]),a._v("表示第 n 个域，随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。")]),a._v(" "),t("p",[a._v("（4）搜索 /etc/passwd 有 root 关键字的所有行。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" -F: "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'/root/'")]),a._v(" /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\n")])])]),t("p",[a._v("上面三种是 awk 的 action 的使用示例，而这种是 pattern 的使用示例，匹配了 pattern（这里是root）的行才会执行 action（没有指定 action，默认输出每行的内容）。")]),a._v(" "),t("p",[a._v("搜索支持正则表达式，例如找 root 开头的所有行。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" -F: "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'/^root/'")]),a._v(" /etc/passwd\n")])])]),t("p",[a._v("（5）搜索/etc/passwd有 root 关键字的所有行，并显示对应的 Shell。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" -F: "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'/root/{print $7}'")]),a._v(" /etc/passwd\n/bin/bash\n")])])]),t("p",[a._v("这里是 awk 的 pattern+action 示例用法，同时指明了 action 是 {print $7}。")]),a._v(" "),t("p",[a._v("（6）打印 /etc/passwd 第三行的第一列和第二列。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" -F: "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'NR==3{print $1,$2;}'")]),a._v(" /etc/passwd\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#输出结果：")]),a._v("\ndaemon x\n")])])]),t("h3",{attrs:{id:"_7-2-awk-在每一列后添加字符串后输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-awk-在每一列后添加字符串后输出"}},[a._v("#")]),a._v(" 7.2 awk 在每一列后添加字符串后输出")]),a._v(" "),t("p",[a._v("设定变量内容：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('a="/test.html /dir1 /abc.txt"\n')])])]),t("p",[a._v("希望得到")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$a")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--exclude")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/test.html "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--exclude")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/dir1 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--exclude")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("/abc.txt\n")])])]),t("p",[a._v("如何用 awk 实现。")]),a._v(" "),t("p",[a._v("解决办法：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('\'{for(i=1;i<=NF-1;++i){printf "-execute=%s ",$i}}{print "--exclude="$NF""}\'')]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#或者")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$a")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('\'{for(i=1;i<=NF;i++){printf "--exclude="$i" "}{print ""}}\'')]),a._v("\n")])])]),t("p",[a._v("后者是网友给出的答案，和我上面的写法差不多，只是对 printf 在使用形式上有所差别而已。第二种方法"),t("code",[a._v('print ""')]),a._v("用于换行，print 每次输出后默认进行换行。")]),a._v(" "),t("h3",{attrs:{id:"_7-3-shell-编程使用-awk-浮点运算保留两位小数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-shell-编程使用-awk-浮点运算保留两位小数"}},[a._v("#")]),a._v(" 7.3 Shell 编程使用 awk 浮点运算保留两位小数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("a=3\nb=10\nc=$(awk 'BEGIN{printf \"%.2f\",'$a'*100/'$b'}')\necho c:$c%\n")])])]),t("p",[a._v("或者：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("c=$(awk -v n=$a -v m=$b 'BEGIN{printf \"%.2f\",n*100/m}')\necho c:$c%\n")])])]),t("p",[a._v("-v表示定义awk的变量！v是variable的首字母。输出：c：30.00%。")]),a._v(" "),t("h3",{attrs:{id:"_7-4-awk-访问-shell-变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-awk-访问-shell-变量"}},[a._v("#")]),a._v(" 7.4 awk 访问 Shell 变量")]),a._v(" "),t("p",[a._v("awk 默认是无法访问shell变量的，我所知道的有三种方法。\n方法一：awk -v 选项让awk 里使用shell变量。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dablelv0\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dablelv1\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("tmpVar0")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("tmpVar1")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'BEGIN{print tmpVar0\" \"tmpVar1}'")]),a._v("\n")])])]),t("p",[a._v("输出： dablelv0 dablelv1\n注意： BEGIN 必须大写，awk 的 {action} 必须要使用单引号括起来。")]),a._v(" "),t("p",[a._v("方法二："),t("code",[a._v("'\"$var\"'")]),a._v("\n这种写法是老外常用的写法。如:")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"test"')]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'BEGIN{print \"'")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'\"}'")]),a._v("\n")])])]),t("p",[a._v("这种写法其实际是双括号变为单括号的常量,传递给了awk。")]),a._v(" "),t("p",[a._v("如果var中含空格，为了shell不把空格作为分格符，应该如下使用：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"this is a test"')]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'BEGIN{print \"'")]),a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"\'"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("' \n")])])]),t("p",[a._v("方法三：export 变量，将变量设置为临时会话环境变量，仅在当前shell会话中有效。在awk中使用"),t("code",[a._v('ENVIRON["var"]')]),a._v("形式访问变量。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"this is a test"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#或者 export var")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#或者")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"this is a test"')]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'BEGIN{print ENVIRON[\"var\"]}'")]),a._v(" \n")])])]),t("h3",{attrs:{id:"_7-5-awk-执行-shell-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-awk-执行-shell-命令"}},[a._v("#")]),a._v(" 7.5 awk 执行 Shell 命令")]),a._v(" "),t("p",[a._v("awk 执行 Shell 命令有两种方法。\n方法一：使用awk的system()函数。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("dablelv\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'BEGIN{system(\"echo $var\")}'")]),a._v("\n")])])]),t("p",[a._v("输出：dablelv\n注意：一定要使用export将变量设置为临时环境变量，因为awk的system()实际上是新建了一个shell进程来执行给定的shell命令，否则无法访问父进程的变量。")]),a._v(" "),t("p",[a._v("方法二：使用"),t("code",[a._v('使用print cmd | "/bin/bash"')])]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"this is a test"')]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('\'BEGIN{print "echo ""\'')]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),a._v('"')]),a._v("'"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"|"')]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sh")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"}\'\n\n#或者\nvar="')]),a._v("this is a "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"\nawk -v varTmp="')]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$var")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" \'BEGIN{print "')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"varTmp|"')]),a._v('sh"'),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("'\n")])])]),t("p",[a._v("输出：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("this is a test\n")])])]),t("p",[a._v("注意：\n（1）指定bash的时候需要双引号括起来；\n（2）方法二与方法一的区别在于方法二是将变量在awk解析后再通过管道传给shell，所以无需将变量设置为临时环境变量，因为shell接收到的变量已经是变量的值。")]),a._v(" "),t("h2",{attrs:{id:"_8-faq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-faq"}},[a._v("#")]),a._v(" 8.FAQ")]),a._v(" "),t("p",[a._v("（1）awk 默认以空格和 Tab 作为域分隔符，现在只以空格为分隔符，需要使用中括号的方式，不使用中括号，则仍然会将 Tab 作为域分隔符。")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 错误的写法")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" -F"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("' '")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'{print $1;}'")]),a._v(" test.txt\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 正确的写法")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" -F"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'[ ]'")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'{print $1;}'")]),a._v(" test.txt \n")])])]),t("hr"),a._v(" "),t("h2",{attrs:{id:"参考文献"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[a._v("#")]),a._v(" 参考文献")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.linux.org/docs/man1/awk.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("awk manual - linux.org"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/awk.1p.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("awk(1p) - Linux manual page - man7.org"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://awk.js.org/",target:"_blank",rel:"noopener noreferrer"}},[a._v("awk online"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"http://man.linuxde.net/awk",target:"_blank",rel:"noopener noreferrer"}},[a._v("Linux命令大全.awk命令"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"http://www.runoob.com/linux/linux-comm-awk.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("菜鸟教程.Linux awk 命令"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("博客园.linux awk命令详解"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"http://blog.csdn.net/yakoo5/article/details/43952713",target:"_blank",rel:"noopener noreferrer"}},[a._v("Shell脚本之awk篇"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"http://blog.163.com/zihuan_xuan/blog/static/1287942432012111041854341/",target:"_blank",rel:"noopener noreferrer"}},[a._v("awk使用shell变量"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"http://blog.chinaunix.net/uid-280990-id-2449802.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("awk中使用shell命令"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/hongchangfirst/article/details/25071937",target:"_blank",rel:"noopener noreferrer"}},[a._v("awk按照多个分隔符进行分割"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);