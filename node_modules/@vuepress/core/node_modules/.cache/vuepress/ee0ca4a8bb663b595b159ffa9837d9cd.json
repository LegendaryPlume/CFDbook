{"remainingRequest":"D:\\code\\mygithub\\backend-cmd\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\code\\mygithub\\backend-cmd\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??ref--6!D:\\code\\mygithub\\backend-cmd\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\code\\mygithub\\backend-cmd\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\code\\mygithub\\backend-cmd\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!D:\\code\\mygithub\\backend-cmd\\docs\\终端配置\\shopt-builtin.md?vue&type=template&id=7f86176e&","dependencies":[{"path":"D:\\code\\mygithub\\backend-cmd\\docs\\终端配置\\shopt-builtin.md","mtime":1683983328975},{"path":"D:\\code\\mygithub\\backend-cmd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683545488476},{"path":"D:\\code\\mygithub\\backend-cmd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683545488476},{"path":"D:\\code\\mygithub\\backend-cmd\\node_modules\\babel-loader\\lib\\index.js","mtime":1683545488677},{"path":"D:\\code\\mygithub\\backend-cmd\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1683545490727},{"path":"D:\\code\\mygithub\\backend-cmd\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683545488476},{"path":"D:\\code\\mygithub\\backend-cmd\\node_modules\\vue-loader\\lib\\index.js","mtime":1683545490185},{"path":"D:\\code\\mygithub\\backend-cmd\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1683545486479}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}